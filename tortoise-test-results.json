{
  "baseUrl": "http://127.0.0.1:7860",
  "timestamp": "2025-10-22T10:58:24.706Z",
  "tests": [
    {
      "name": "Basic Connectivity",
      "url": "http://127.0.0.1:7860",
      "method": "GET",
      "status": "success",
      "details": {
        "statusCode": 200,
        "statusMessage": "OK",
        "contentType": "text/html; charset=utf-8",
        "responseLength": 53606,
        "containsGradio": true,
        "containsTortoise": true
      }
    },
    {
      "name": "Endpoint: /",
      "url": "http://127.0.0.1:7860/",
      "method": "GET",
      "status": "success",
      "details": {
        "statusCode": 200,
        "statusMessage": "OK",
        "contentType": "text/html; charset=utf-8"
      }
    },
    {
      "name": "Endpoint: /api",
      "url": "http://127.0.0.1:7860/api",
      "method": "GET",
      "status": "not_found",
      "details": {
        "statusCode": 404,
        "statusMessage": "Not Found",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /docs",
      "url": "http://127.0.0.1:7860/docs",
      "method": "GET",
      "status": "not_found",
      "details": {
        "statusCode": 404,
        "statusMessage": "Not Found",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /config",
      "url": "http://127.0.0.1:7860/config",
      "method": "GET",
      "status": "success",
      "details": {
        "statusCode": 200,
        "statusMessage": "OK",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /api/predict",
      "url": "http://127.0.0.1:7860/api/predict",
      "method": "GET",
      "status": "error",
      "details": {
        "statusCode": 405,
        "statusMessage": "Method Not Allowed",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /run/predict",
      "url": "http://127.0.0.1:7860/run/predict",
      "method": "GET",
      "status": "error",
      "details": {
        "statusCode": 405,
        "statusMessage": "Method Not Allowed",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /predict",
      "url": "http://127.0.0.1:7860/predict",
      "method": "GET",
      "status": "not_found",
      "details": {
        "statusCode": 404,
        "statusMessage": "Not Found",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /api/predict/0",
      "url": "http://127.0.0.1:7860/api/predict/0",
      "method": "GET",
      "status": "not_found",
      "details": {
        "statusCode": 404,
        "statusMessage": "Not Found",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /api/predict/1",
      "url": "http://127.0.0.1:7860/api/predict/1",
      "method": "GET",
      "status": "not_found",
      "details": {
        "statusCode": 404,
        "statusMessage": "Not Found",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /upload",
      "url": "http://127.0.0.1:7860/upload",
      "method": "GET",
      "status": "error",
      "details": {
        "statusCode": 405,
        "statusMessage": "Method Not Allowed",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /file",
      "url": "http://127.0.0.1:7860/file",
      "method": "GET",
      "status": "error",
      "details": {
        "statusCode": 307,
        "statusMessage": "Temporary Redirect"
      }
    },
    {
      "name": "Endpoint: /health",
      "url": "http://127.0.0.1:7860/health",
      "method": "GET",
      "status": "not_found",
      "details": {
        "statusCode": 404,
        "statusMessage": "Not Found",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /status",
      "url": "http://127.0.0.1:7860/status",
      "method": "GET",
      "status": "not_found",
      "details": {
        "statusCode": 404,
        "statusMessage": "Not Found",
        "contentType": "application/json"
      }
    },
    {
      "name": "Endpoint: /info",
      "url": "http://127.0.0.1:7860/info",
      "method": "GET",
      "status": "success",
      "details": {
        "statusCode": 200,
        "statusMessage": "OK",
        "contentType": "application/json"
      }
    },
    {
      "name": "Gradio POST: /api/predict",
      "url": "http://127.0.0.1:7860/api/predict",
      "method": "POST",
      "status": "error",
      "details": {
        "statusCode": 500,
        "statusMessage": "Internal Server Error"
      }
    },
    {
      "name": "Gradio POST: /run/predict",
      "url": "http://127.0.0.1:7860/run/predict",
      "method": "POST",
      "status": "error",
      "details": {
        "statusCode": 500,
        "statusMessage": "Internal Server Error"
      }
    },
    {
      "name": "Gradio POST: /api/predict/0",
      "url": "http://127.0.0.1:7860/api/predict/0",
      "method": "POST",
      "status": "error",
      "details": {
        "statusCode": 404,
        "statusMessage": "Not Found"
      }
    },
    {
      "name": "Gradio POST: /api/predict/1",
      "url": "http://127.0.0.1:7860/api/predict/1",
      "method": "POST",
      "status": "error",
      "details": {
        "statusCode": 404,
        "statusMessage": "Not Found"
      }
    }
  ],
  "serverInfo": {
    "/config": {
      "version": "3.50.2",
      "mode": "interface",
      "app_id": 6909046574491849000,
      "dev_mode": false,
      "analytics_enabled": true,
      "components": [
        {
          "id": 8,
          "type": "markdown",
          "props": {
            "value": "<h1 style='text-align: center; margin-bottom: 1rem'>Tortoise TTS üê¢</h1>",
            "rtl": false,
            "latex_delimiters": [
              {
                "left": "$",
                "right": "$",
                "display": false
              }
            ],
            "visible": true,
            "sanitize_html": true,
            "line_breaks": false,
            "name": "markdown"
          },
          "serializer": "StringSerializable",
          "api_info": {
            "info": {
              "type": "string"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": "Howdy!",
            "serialized": "Howdy!"
          }
        },
        {
          "id": 9,
          "type": "markdown",
          "props": {
            "value": "A text-to-speech system which powers lot of organizations in Speech synthesis domain.\n<br/>\na model with strong multi-voice capabilities, highly realistic prosody and intonation.\n<br/>\nfor faster inference, use the 'ultra_fast' preset and duplicate space if you don't want to wait in a queue.\n<br/>",
            "rtl": false,
            "latex_delimiters": [
              {
                "left": "$",
                "right": "$",
                "display": false
              }
            ],
            "visible": true,
            "sanitize_html": true,
            "line_breaks": false,
            "name": "markdown"
          },
          "serializer": "StringSerializable",
          "api_info": {
            "info": {
              "type": "string"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": "Howdy!",
            "serialized": "Howdy!"
          }
        },
        {
          "id": 10,
          "type": "row",
          "props": {
            "variant": "default",
            "visible": true,
            "equal_height": false,
            "name": "row"
          }
        },
        {
          "id": 11,
          "type": "column",
          "props": {
            "scale": 1,
            "min_width": 320,
            "variant": "panel",
            "visible": true,
            "name": "column"
          }
        },
        {
          "id": 12,
          "type": "column",
          "props": {
            "scale": 1,
            "min_width": 320,
            "variant": "default",
            "visible": true,
            "name": "column"
          }
        },
        {
          "id": 0,
          "type": "textbox",
          "props": {
            "value": "",
            "lines": 4,
            "max_lines": 20,
            "label": "Text (Provide either text, or upload a newline separated text file below):",
            "show_label": true,
            "container": true,
            "min_width": 160,
            "visible": true,
            "autofocus": false,
            "autoscroll": true,
            "type": "text",
            "rtl": false,
            "show_copy_button": false,
            "name": "textbox",
            "selectable": false
          },
          "serializer": "StringSerializable",
          "api_info": {
            "info": {
              "type": "string"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": "Howdy!",
            "serialized": "Howdy!"
          }
        },
        {
          "id": 1,
          "type": "file",
          "props": {
            "file_count": "single",
            "type": "file",
            "label": "Upload a text file",
            "show_label": true,
            "container": true,
            "min_width": 160,
            "visible": true,
            "name": "file",
            "selectable": false
          },
          "serializer": "FileSerializable",
          "api_info": {
            "info": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "filepath on your computer (or URL) of file"
                },
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "name of file"
                    },
                    "data": {
                      "type": "string",
                      "description": "base64 representation of file"
                    },
                    "size": {
                      "type": "integer",
                      "description": "size of image in bytes"
                    },
                    "is_file": {
                      "type": "boolean",
                      "description": "true if the file has been uploaded to the server"
                    },
                    "orig_name": {
                      "type": "string",
                      "description": "original name of the file"
                    }
                  },
                  "required": [
                    "name",
                    "data"
                  ]
                }
              ]
            },
            "serialized_info": true
          },
          "example_inputs": {
            "raw": {
              "is_file": false,
              "data": {
                "name": "test/test_files/sample_file.pdf",
                "data": "data:@file/pdf;base64,"
              }
            },
            "serialized": "https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf"
          }
        },
        {
          "id": 2,
          "type": "dropdown",
          "props": {
            "choices": [
              [
                "angie",
                "angie"
              ],
              [
                "deniro",
                "deniro"
              ],
              [
                "freeman",
                "freeman"
              ],
              [
                "halle",
                "halle"
              ],
              [
                "lj",
                "lj"
              ],
              [
                "myself",
                "myself"
              ],
              [
                "pat2",
                "pat2"
              ],
              [
                "snakes",
                "snakes"
              ],
              [
                "tom",
                "tom"
              ],
              [
                "daws",
                "daws"
              ],
              [
                "dreams",
                "dreams"
              ],
              [
                "grace",
                "grace"
              ],
              [
                "lescault",
                "lescault"
              ],
              [
                "weaver",
                "weaver"
              ],
              [
                "applejack",
                "applejack"
              ],
              [
                "daniel",
                "daniel"
              ],
              [
                "emma",
                "emma"
              ],
              [
                "geralt",
                "geralt"
              ],
              [
                "jlaw",
                "jlaw"
              ],
              [
                "mol",
                "mol"
              ],
              [
                "pat",
                "pat"
              ],
              [
                "rainbow",
                "rainbow"
              ],
              [
                "tim_reynolds",
                "tim_reynolds"
              ],
              [
                "atkins",
                "atkins"
              ],
              [
                "dortice",
                "dortice"
              ],
              [
                "empire",
                "empire"
              ],
              [
                "kennard",
                "kennard"
              ],
              [
                "mouse",
                "mouse"
              ],
              [
                "william",
                "william"
              ],
              [
                "jane_eyre",
                "jane_eyre"
              ],
              [
                "random",
                "random"
              ],
              [
                "disabled",
                "disabled"
              ]
            ],
            "value": "random",
            "type": "value",
            "allow_custom_value": false,
            "filterable": true,
            "label": "Select voice:",
            "show_label": true,
            "container": true,
            "min_width": 160,
            "visible": true,
            "name": "dropdown",
            "selectable": false
          },
          "serializer": "SimpleSerializable",
          "api_info": {
            "info": {
              "type": "string",
              "description": "Option from: [('angie', 'angie'), ('deniro', 'deniro'), ('freeman', 'freeman'), ('halle', 'halle'), ('lj', 'lj'), ('myself', 'myself'), ('pat2', 'pat2'), ('snakes', 'snakes'), ('tom', 'tom'), ('daws', 'daws'), ('dreams', 'dreams'), ('grace', 'grace'), ('lescault', 'lescault'), ('weaver', 'weaver'), ('applejack', 'applejack'), ('daniel', 'daniel'), ('emma', 'emma'), ('geralt', 'geralt'), ('jlaw', 'jlaw'), ('mol', 'mol'), ('pat', 'pat'), ('rainbow', 'rainbow'), ('tim_reynolds', 'tim_reynolds'), ('atkins', 'atkins'), ('dortice', 'dortice'), ('empire', 'empire'), ('kennard', 'kennard'), ('mouse', 'mouse'), ('william', 'william'), ('jane_eyre', 'jane_eyre'), ('random', 'random'), ('disabled', 'disabled')]"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": [
              "angie",
              "angie"
            ],
            "serialized": [
              "angie",
              "angie"
            ]
          }
        },
        {
          "id": 3,
          "type": "dropdown",
          "props": {
            "choices": [
              [
                "angie",
                "angie"
              ],
              [
                "deniro",
                "deniro"
              ],
              [
                "freeman",
                "freeman"
              ],
              [
                "halle",
                "halle"
              ],
              [
                "lj",
                "lj"
              ],
              [
                "myself",
                "myself"
              ],
              [
                "pat2",
                "pat2"
              ],
              [
                "snakes",
                "snakes"
              ],
              [
                "tom",
                "tom"
              ],
              [
                "daws",
                "daws"
              ],
              [
                "dreams",
                "dreams"
              ],
              [
                "grace",
                "grace"
              ],
              [
                "lescault",
                "lescault"
              ],
              [
                "weaver",
                "weaver"
              ],
              [
                "applejack",
                "applejack"
              ],
              [
                "daniel",
                "daniel"
              ],
              [
                "emma",
                "emma"
              ],
              [
                "geralt",
                "geralt"
              ],
              [
                "jlaw",
                "jlaw"
              ],
              [
                "mol",
                "mol"
              ],
              [
                "pat",
                "pat"
              ],
              [
                "rainbow",
                "rainbow"
              ],
              [
                "tim_reynolds",
                "tim_reynolds"
              ],
              [
                "atkins",
                "atkins"
              ],
              [
                "dortice",
                "dortice"
              ],
              [
                "empire",
                "empire"
              ],
              [
                "kennard",
                "kennard"
              ],
              [
                "mouse",
                "mouse"
              ],
              [
                "william",
                "william"
              ],
              [
                "jane_eyre",
                "jane_eyre"
              ],
              [
                "random",
                "random"
              ],
              [
                "disabled",
                "disabled"
              ]
            ],
            "value": "disabled",
            "type": "value",
            "allow_custom_value": false,
            "filterable": true,
            "label": "(Optional) Select second voice:",
            "show_label": true,
            "container": true,
            "min_width": 160,
            "visible": true,
            "name": "dropdown",
            "selectable": false
          },
          "serializer": "SimpleSerializable",
          "api_info": {
            "info": {
              "type": "string",
              "description": "Option from: [('angie', 'angie'), ('deniro', 'deniro'), ('freeman', 'freeman'), ('halle', 'halle'), ('lj', 'lj'), ('myself', 'myself'), ('pat2', 'pat2'), ('snakes', 'snakes'), ('tom', 'tom'), ('daws', 'daws'), ('dreams', 'dreams'), ('grace', 'grace'), ('lescault', 'lescault'), ('weaver', 'weaver'), ('applejack', 'applejack'), ('daniel', 'daniel'), ('emma', 'emma'), ('geralt', 'geralt'), ('jlaw', 'jlaw'), ('mol', 'mol'), ('pat', 'pat'), ('rainbow', 'rainbow'), ('tim_reynolds', 'tim_reynolds'), ('atkins', 'atkins'), ('dortice', 'dortice'), ('empire', 'empire'), ('kennard', 'kennard'), ('mouse', 'mouse'), ('william', 'william'), ('jane_eyre', 'jane_eyre'), ('random', 'random'), ('disabled', 'disabled')]"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": [
              "angie",
              "angie"
            ],
            "serialized": [
              "angie",
              "angie"
            ]
          }
        },
        {
          "id": 4,
          "type": "radio",
          "props": {
            "choices": [
              [
                "Yes",
                "Yes"
              ],
              [
                "No",
                "No"
              ]
            ],
            "value": "No",
            "type": "value",
            "label": "Split by newline (If [No], it will automatically try to find relevant splits):",
            "show_label": true,
            "container": true,
            "min_width": 160,
            "visible": true,
            "name": "radio",
            "selectable": false
          },
          "serializer": "StringSerializable",
          "api_info": {
            "info": {
              "type": "string"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": "Yes",
            "serialized": "Yes"
          }
        },
        {
          "id": 5,
          "type": "number",
          "props": {
            "label": "Seed (optional):",
            "show_label": true,
            "container": true,
            "min_width": 160,
            "visible": true,
            "step": 1,
            "name": "number"
          },
          "serializer": "NumberSerializable",
          "api_info": {
            "info": {
              "type": "number"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": 5,
            "serialized": 5
          }
        },
        {
          "id": 13,
          "type": "form",
          "props": {
            "scale": 0,
            "min_width": 0,
            "name": "form"
          }
        },
        {
          "id": 14,
          "type": "form",
          "props": {
            "scale": 0,
            "min_width": 0,
            "name": "form"
          }
        },
        {
          "id": 15,
          "type": "row",
          "props": {
            "variant": "default",
            "visible": true,
            "equal_height": true,
            "name": "row"
          }
        },
        {
          "id": 16,
          "type": "button",
          "props": {
            "value": "Clear",
            "variant": "secondary",
            "visible": true,
            "interactive": true,
            "name": "button"
          },
          "serializer": "StringSerializable",
          "api_info": {
            "info": {
              "type": "string"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": "Howdy!",
            "serialized": "Howdy!"
          }
        },
        {
          "id": 17,
          "type": "button",
          "props": {
            "value": "Submit",
            "variant": "primary",
            "visible": true,
            "interactive": true,
            "name": "button"
          },
          "serializer": "StringSerializable",
          "api_info": {
            "info": {
              "type": "string"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": "Howdy!",
            "serialized": "Howdy!"
          }
        },
        {
          "id": 18,
          "type": "button",
          "props": {
            "value": "Stop",
            "variant": "stop",
            "visible": false,
            "interactive": true,
            "name": "button"
          },
          "serializer": "StringSerializable",
          "api_info": {
            "info": {
              "type": "string"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": "Howdy!",
            "serialized": "Howdy!"
          }
        },
        {
          "id": 19,
          "type": "column",
          "props": {
            "scale": 1,
            "min_width": 320,
            "variant": "panel",
            "visible": true,
            "name": "column"
          }
        },
        {
          "id": 6,
          "type": "audio",
          "props": {
            "source": "microphone",
            "type": "numpy",
            "label": "streaming audio:",
            "show_label": true,
            "container": true,
            "min_width": 160,
            "interactive": false,
            "visible": true,
            "streaming": true,
            "format": "wav",
            "autoplay": true,
            "show_download_button": true,
            "show_share_button": false,
            "show_edit_button": true,
            "name": "audio"
          },
          "serializer": "FileSerializable",
          "api_info": {
            "info": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "filepath on your computer (or URL) of file"
                },
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "name of file"
                    },
                    "data": {
                      "type": "string",
                      "description": "base64 representation of file"
                    },
                    "size": {
                      "type": "integer",
                      "description": "size of image in bytes"
                    },
                    "is_file": {
                      "type": "boolean",
                      "description": "true if the file has been uploaded to the server"
                    },
                    "orig_name": {
                      "type": "string",
                      "description": "original name of the file"
                    }
                  },
                  "required": [
                    "name",
                    "data"
                  ]
                }
              ]
            },
            "serialized_info": true
          },
          "example_inputs": {
            "raw": {
              "is_file": false,
              "data": {
                "name": "test/test_files/audio_sample.wav",
                "data": "data:audio/wav;base64,"
              }
            },
            "serialized": "https://github.com/gradio-app/gradio/raw/main/test/test_files/audio_sample.wav"
          }
        },
        {
          "id": 20,
          "type": "row",
          "props": {
            "variant": "default",
            "visible": true,
            "equal_height": true,
            "name": "row"
          }
        },
        {
          "id": 21,
          "type": "button",
          "props": {
            "value": "Flag",
            "variant": "secondary",
            "visible": true,
            "interactive": true,
            "name": "button"
          },
          "serializer": "StringSerializable",
          "api_info": {
            "info": {
              "type": "string"
            },
            "serialized_info": false
          },
          "example_inputs": {
            "raw": "Howdy!",
            "serialized": "Howdy!"
          }
        }
      ],
      "css": null,
      "title": "Tortoise TTS üê¢",
      "space_id": null,
      "enable_queue": true,
      "show_error": false,
      "show_api": true,
      "is_colab": false,
      "stylesheets": [
        "https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600&display=swap",
        "https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;600&display=swap"
      ],
      "theme": "default",
      "layout": {
        "id": 7,
        "children": [
          {
            "id": 8
          },
          {
            "id": 9
          },
          {
            "id": 10,
            "children": [
              {
                "id": 11,
                "children": [
                  {
                    "id": 12,
                    "children": [
                      {
                        "id": 13,
                        "children": [
                          {
                            "id": 0
                          }
                        ]
                      },
                      {
                        "id": 1
                      },
                      {
                        "id": 14,
                        "children": [
                          {
                            "id": 2
                          },
                          {
                            "id": 3
                          },
                          {
                            "id": 4
                          },
                          {
                            "id": 5
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "id": 15,
                    "children": [
                      {
                        "id": 16
                      },
                      {
                        "id": 17
                      },
                      {
                        "id": 18
                      }
                    ]
                  }
                ]
              },
              {
                "id": 19,
                "children": [
                  {
                    "id": 6
                  },
                  {
                    "id": 20,
                    "children": [
                      {
                        "id": 21
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      "dependencies": [
        {
          "targets": [
            [
              17,
              "click"
            ],
            [
              0,
              "submit"
            ],
            [
              5,
              "submit"
            ]
          ],
          "inputs": [],
          "outputs": [
            17,
            18
          ],
          "backend_fn": true,
          "js": null,
          "queue": false,
          "api_name": null,
          "scroll_to_output": false,
          "show_progress": "full",
          "every": null,
          "batch": false,
          "max_batch_size": 4,
          "cancels": [],
          "types": {
            "continuous": false,
            "generator": false
          },
          "collects_event_data": false,
          "trigger_after": null,
          "trigger_only_on_success": false
        },
        {
          "targets": [
            [
              null,
              "then"
            ]
          ],
          "inputs": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "outputs": [
            6
          ],
          "backend_fn": true,
          "js": null,
          "queue": null,
          "api_name": "predict",
          "scroll_to_output": true,
          "show_progress": "full",
          "every": null,
          "batch": false,
          "max_batch_size": 4,
          "cancels": [],
          "types": {
            "continuous": false,
            "generator": true
          },
          "collects_event_data": false,
          "trigger_after": 0,
          "trigger_only_on_success": false
        },
        {
          "targets": [
            [
              null,
              "then"
            ]
          ],
          "inputs": [],
          "outputs": [
            17,
            18
          ],
          "backend_fn": true,
          "js": null,
          "queue": false,
          "api_name": null,
          "scroll_to_output": false,
          "show_progress": "full",
          "every": null,
          "batch": false,
          "max_batch_size": 4,
          "cancels": [],
          "types": {
            "continuous": false,
            "generator": false
          },
          "collects_event_data": false,
          "trigger_after": 1,
          "trigger_only_on_success": false
        },
        {
          "targets": [
            [
              18,
              "click"
            ]
          ],
          "inputs": [],
          "outputs": [
            17,
            18
          ],
          "backend_fn": true,
          "js": null,
          "queue": false,
          "api_name": null,
          "scroll_to_output": false,
          "show_progress": "full",
          "every": null,
          "batch": false,
          "max_batch_size": 4,
          "cancels": [],
          "types": {
            "continuous": false,
            "generator": false
          },
          "collects_event_data": false,
          "trigger_after": null,
          "trigger_only_on_success": false
        },
        {
          "targets": [
            [
              18,
              "click"
            ]
          ],
          "inputs": [],
          "outputs": [],
          "backend_fn": true,
          "js": null,
          "queue": false,
          "api_name": null,
          "scroll_to_output": false,
          "show_progress": "full",
          "every": null,
          "batch": false,
          "max_batch_size": 4,
          "cancels": [
            1
          ],
          "types": {
            "continuous": false,
            "generator": false
          },
          "collects_event_data": false,
          "trigger_after": null,
          "trigger_only_on_success": false
        },
        {
          "targets": [
            [
              16,
              "click"
            ]
          ],
          "inputs": [],
          "outputs": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "backend_fn": false,
          "js": "() => [null, null, null, null, null, null, null]",
          "queue": false,
          "api_name": null,
          "scroll_to_output": false,
          "show_progress": "full",
          "every": null,
          "batch": false,
          "max_batch_size": 4,
          "cancels": [],
          "types": {
            "continuous": false,
            "generator": false
          },
          "collects_event_data": false,
          "trigger_after": null,
          "trigger_only_on_success": false
        },
        {
          "targets": [
            [
              16,
              "click"
            ]
          ],
          "inputs": [],
          "outputs": [
            12
          ],
          "backend_fn": false,
          "js": "() => [{\"variant\": null, \"visible\": true, \"__type__\": \"update\"}]\n            ",
          "queue": false,
          "api_name": null,
          "scroll_to_output": false,
          "show_progress": "full",
          "every": null,
          "batch": false,
          "max_batch_size": 4,
          "cancels": [],
          "types": {
            "continuous": false,
            "generator": false
          },
          "collects_event_data": false,
          "trigger_after": null,
          "trigger_only_on_success": false
        },
        {
          "targets": [
            [
              21,
              "click"
            ]
          ],
          "inputs": [],
          "outputs": [
            21
          ],
          "backend_fn": true,
          "js": null,
          "queue": false,
          "api_name": null,
          "scroll_to_output": false,
          "show_progress": "full",
          "every": null,
          "batch": false,
          "max_batch_size": 4,
          "cancels": [],
          "types": {
            "continuous": false,
            "generator": false
          },
          "collects_event_data": false,
          "trigger_after": null,
          "trigger_only_on_success": false
        },
        {
          "targets": [
            [
              21,
              "click"
            ]
          ],
          "inputs": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "outputs": [
            21
          ],
          "backend_fn": true,
          "js": null,
          "queue": false,
          "api_name": null,
          "scroll_to_output": false,
          "show_progress": "full",
          "every": null,
          "batch": false,
          "max_batch_size": 4,
          "cancels": [],
          "types": {
            "continuous": false,
            "generator": false
          },
          "collects_event_data": false,
          "trigger_after": null,
          "trigger_only_on_success": false
        },
        {
          "targets": [
            [
              16,
              "click"
            ]
          ],
          "inputs": [],
          "outputs": [
            21
          ],
          "backend_fn": true,
          "js": null,
          "queue": false,
          "api_name": null,
          "scroll_to_output": false,
          "show_progress": "full",
          "every": null,
          "batch": false,
          "max_batch_size": 4,
          "cancels": [],
          "types": {
            "continuous": false,
            "generator": false
          },
          "collects_event_data": false,
          "trigger_after": null,
          "trigger_only_on_success": false
        }
      ],
      "root": ""
    },
    "/info": {
      "named_endpoints": {
        "/predict": {
          "parameters": [
            {
              "label": "Text (Provide either text, or upload a newline separated text file below):",
              "type": {
                "type": "string"
              },
              "python_type": {
                "type": "str",
                "description": ""
              },
              "component": "Textbox",
              "example_input": "Howdy!",
              "serializer": "StringSerializable"
            },
            {
              "label": "Upload a text file",
              "type": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "filepath on your computer (or URL) of file"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "name of file"
                      },
                      "data": {
                        "type": "string",
                        "description": "base64 representation of file"
                      },
                      "size": {
                        "type": "integer",
                        "description": "size of image in bytes"
                      },
                      "is_file": {
                        "type": "boolean",
                        "description": "true if the file has been uploaded to the server"
                      },
                      "orig_name": {
                        "type": "string",
                        "description": "original name of the file"
                      }
                    },
                    "required": [
                      "name",
                      "data"
                    ]
                  }
                ]
              },
              "python_type": {
                "type": "str",
                "description": "filepath on your computer (or URL) of file"
              },
              "component": "File",
              "example_input": "https://github.com/gradio-app/gradio/raw/main/test/test_files/sample_file.pdf",
              "serializer": "FileSerializable"
            },
            {
              "label": "Select voice:",
              "type": {
                "type": "string",
                "description": "Option from: [('angie', 'angie'), ('deniro', 'deniro'), ('freeman', 'freeman'), ('halle', 'halle'), ('lj', 'lj'), ('myself', 'myself'), ('pat2', 'pat2'), ('snakes', 'snakes'), ('tom', 'tom'), ('daws', 'daws'), ('dreams', 'dreams'), ('grace', 'grace'), ('lescault', 'lescault'), ('weaver', 'weaver'), ('applejack', 'applejack'), ('daniel', 'daniel'), ('emma', 'emma'), ('geralt', 'geralt'), ('jlaw', 'jlaw'), ('mol', 'mol'), ('pat', 'pat'), ('rainbow', 'rainbow'), ('tim_reynolds', 'tim_reynolds'), ('atkins', 'atkins'), ('dortice', 'dortice'), ('empire', 'empire'), ('kennard', 'kennard'), ('mouse', 'mouse'), ('william', 'william'), ('jane_eyre', 'jane_eyre'), ('random', 'random'), ('disabled', 'disabled')]"
              },
              "python_type": {
                "type": "str",
                "description": "Option from: [('angie', 'angie'), ('deniro', 'deniro'), ('freeman', 'freeman'), ('halle', 'halle'), ('lj', 'lj'), ('myself', 'myself'), ('pat2', 'pat2'), ('snakes', 'snakes'), ('tom', 'tom'), ('daws', 'daws'), ('dreams', 'dreams'), ('grace', 'grace'), ('lescault', 'lescault'), ('weaver', 'weaver'), ('applejack', 'applejack'), ('daniel', 'daniel'), ('emma', 'emma'), ('geralt', 'geralt'), ('jlaw', 'jlaw'), ('mol', 'mol'), ('pat', 'pat'), ('rainbow', 'rainbow'), ('tim_reynolds', 'tim_reynolds'), ('atkins', 'atkins'), ('dortice', 'dortice'), ('empire', 'empire'), ('kennard', 'kennard'), ('mouse', 'mouse'), ('william', 'william'), ('jane_eyre', 'jane_eyre'), ('random', 'random'), ('disabled', 'disabled')]"
              },
              "component": "Dropdown",
              "example_input": [
                "angie",
                "angie"
              ],
              "serializer": "SimpleSerializable"
            },
            {
              "label": "(Optional) Select second voice:",
              "type": {
                "type": "string",
                "description": "Option from: [('angie', 'angie'), ('deniro', 'deniro'), ('freeman', 'freeman'), ('halle', 'halle'), ('lj', 'lj'), ('myself', 'myself'), ('pat2', 'pat2'), ('snakes', 'snakes'), ('tom', 'tom'), ('daws', 'daws'), ('dreams', 'dreams'), ('grace', 'grace'), ('lescault', 'lescault'), ('weaver', 'weaver'), ('applejack', 'applejack'), ('daniel', 'daniel'), ('emma', 'emma'), ('geralt', 'geralt'), ('jlaw', 'jlaw'), ('mol', 'mol'), ('pat', 'pat'), ('rainbow', 'rainbow'), ('tim_reynolds', 'tim_reynolds'), ('atkins', 'atkins'), ('dortice', 'dortice'), ('empire', 'empire'), ('kennard', 'kennard'), ('mouse', 'mouse'), ('william', 'william'), ('jane_eyre', 'jane_eyre'), ('random', 'random'), ('disabled', 'disabled')]"
              },
              "python_type": {
                "type": "str",
                "description": "Option from: [('angie', 'angie'), ('deniro', 'deniro'), ('freeman', 'freeman'), ('halle', 'halle'), ('lj', 'lj'), ('myself', 'myself'), ('pat2', 'pat2'), ('snakes', 'snakes'), ('tom', 'tom'), ('daws', 'daws'), ('dreams', 'dreams'), ('grace', 'grace'), ('lescault', 'lescault'), ('weaver', 'weaver'), ('applejack', 'applejack'), ('daniel', 'daniel'), ('emma', 'emma'), ('geralt', 'geralt'), ('jlaw', 'jlaw'), ('mol', 'mol'), ('pat', 'pat'), ('rainbow', 'rainbow'), ('tim_reynolds', 'tim_reynolds'), ('atkins', 'atkins'), ('dortice', 'dortice'), ('empire', 'empire'), ('kennard', 'kennard'), ('mouse', 'mouse'), ('william', 'william'), ('jane_eyre', 'jane_eyre'), ('random', 'random'), ('disabled', 'disabled')]"
              },
              "component": "Dropdown",
              "example_input": [
                "angie",
                "angie"
              ],
              "serializer": "SimpleSerializable"
            },
            {
              "label": "Split by newline (If [No], it will automatically try to find relevant splits):",
              "type": {
                "type": "string"
              },
              "python_type": {
                "type": "str",
                "description": ""
              },
              "component": "Radio",
              "example_input": "Yes",
              "serializer": "StringSerializable"
            },
            {
              "label": "Seed (optional):",
              "type": {
                "type": "number"
              },
              "python_type": {
                "type": "int | float",
                "description": ""
              },
              "component": "Number",
              "example_input": 5,
              "serializer": "NumberSerializable"
            }
          ],
          "returns": [
            {
              "label": "streaming audio:",
              "type": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "filepath on your computer (or URL) of file"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "name of file"
                      },
                      "data": {
                        "type": "string",
                        "description": "base64 representation of file"
                      },
                      "size": {
                        "type": "integer",
                        "description": "size of image in bytes"
                      },
                      "is_file": {
                        "type": "boolean",
                        "description": "true if the file has been uploaded to the server"
                      },
                      "orig_name": {
                        "type": "string",
                        "description": "original name of the file"
                      }
                    },
                    "required": [
                      "name",
                      "data"
                    ]
                  }
                ]
              },
              "python_type": {
                "type": "str",
                "description": "filepath on your computer (or URL) of file"
              },
              "component": "Audio",
              "serializer": "FileSerializable"
            }
          ]
        }
      },
      "unnamed_endpoints": {}
    }
  }
}