rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user owns the project
    function isProjectOwner(projectData) {
      return isAuthenticated() && request.auth.uid == projectData.userId;
    }
    
    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      
      // User subscriptions subcollection - users can only access their own subscriptions
      match /subscriptions/{subscriptionId} {
        allow read, write: if isOwner(userId);
      }
      
      // User events subcollection - users can only access their own events
      match /events/{eventType} {
        allow read, write: if isOwner(userId);
        
        // Allow public read access for Twitch events (for overlay)
        allow read: if eventType.matches('twitch_.*');
        
        // Event alerts subcollection
        match /alerts/{alertId} {
          allow read, write: if isOwner(userId);
          
          // Allow public read access for Twitch event alerts (for overlay)
          allow read: if eventType.matches('twitch_.*');
        }
      }
    }
    
    // Projects collection - users can only access their own projects
    match /projects/{projectId} {
      // Allow read/write only if user owns the project
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Allow create only if user is setting themselves as the owner
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow public read access for active Twitch projects (for overlay)
      allow read: if resource.data.twitchSubscription == true && 
        resource.data.platform == 'twitch';
    }
    
    // Voices collection - users can only access their own voices
    match /voices/{voiceId} {
      // Allow read/write only if user owns the voice
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Allow create only if user is setting themselves as the owner
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Project alerts subcollection - users can only access alerts for their own projects
    match /projects/{projectId}/alerts/{alertId} {
      // Allow read/write only if user owns the parent project
      allow read, write: if isAuthenticated() && 
        get(/databases/$(database)/documents/projects/$(projectId)).data.userId == request.auth.uid;
      
      // Allow create only if user owns the parent project
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/projects/$(projectId)).data.userId == request.auth.uid;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}