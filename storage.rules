rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Voice files - users can only upload/access their own voice files
    match /voices/{fileName} {
      allow read, write: if isAuthenticated() && 
        fileName.matches('voice_' + request.auth.uid + '_.*');
    }
    
    // Avatar images - users can only upload/access their own avatar images
    match /avatars/{fileName} {
      allow read, write: if isAuthenticated() && 
        fileName.matches('avatar_' + request.auth.uid + '_.*');
    }
    
    // Project-specific files - users can only access files for their own projects
    match /projects/{projectId}/{fileType}/{fileName} {
      // Allow access only if user owns the project
      allow read, write: if isAuthenticated() && 
        request.auth.uid == projectId.split('_')[1]; // Extract userId from projectId format
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
